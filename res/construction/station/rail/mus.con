local func = require "entry/func"
local coor = require "entry/coor"
local pipe = require "entry/pipe"
local mus = require "mus"
local musm = require "mus_menu"
-- local dump = require "luadump"
local ma = math
local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)
local unpack = table.unpack

local depth = -12
local function params()
    return {
        {
            key = "wall",
            name = _("MENU_WALL"),
            values = {
                "ui/construction/station/rail/tiles.tga",
                "ui/construction/station/rail/tiles_classic.tga"
            },
            uiType = "ICON_BUTTON",
            defaultIndex = 0
        },
        {
            key = "floor",
            name = _("MENU_FLOOR_STYLE"),
            values = {
                "ui/construction/station/rail/marble.tga",
                "ui/construction/station/rail/honeycomb.tga",
                "ui/construction/station/rail/marble_geometric.tga",
                "ui/construction/station/rail/concrete_tiles2.tga",
                "ui/construction/station/rail/asphalt.tga"
            },
            uiType = "ICON_BUTTON",
            defaultIndex = 0
        },
        {
            key = "radius",
            name = _("MENU_RADIUS"),
            values = musm.rList * pipe.map(function(r) return r > 15 and "âˆž" or tostring(math.floor(r * 1000)) end),
            uiType = "SLIDER",
            defaultIndex = (#musm.rList - 1) / 2
        },
        {
            key = "lPlatform",
            name = _("MENU_PLATFORM_LENGTH"),
            values = func.map(musm.trackLengths, tostring),
            uiType = "SLIDER",
            defaultIndex = 5
        },
        {
            key = "hPlatform",
            name = _("MENU_PLATFORM_HEIGHT"),
            values = func.map(musm.hPlatformList, tostring),
            uiType = "SLIDER",
            defaultIndex = 3
        },
        {
            key = "slope",
            name = _("MENU_SLOPE"),
            values = func.map(musm.slopeList, tostring),
            uiType = "SLIDER",
            defaultIndex = (#musm.slopeList - 1) / 2
        }
    }
end

local offsetGen = function(meta)
    local function gen(result, base, lastPos, fst, snd, ...)
        if (fst and snd) then
            local pos = snd.pos
            local offset = base + (fst.width + snd.width) * 0.5
            
            return gen(result + {{pos, offset}}, offset, pos, snd, ...)
        else
            return result
        end
    end
    return gen(pipe.new * {}, 0, nil, {width = 0}, unpack(meta))
end

local function connectionLevel(lhs, rhs)
    local result = lhs
        * pipe.map(
            function(l)
                return func.map(rhs,
                    function(r)
                        return {
                            distance = (l - r):length2(),
                            pt = {l, r}
                        }
                    end)
            end)
        * pipe.flatten()
        * pipe.sort(function(l, r) return l.distance < r.distance end)
    
    return result[1]
end

local function closestConnection(result, measure, ...)
    local rest = {...}
    if (#rest == 0) then return result end
    local r = false
    for i = 1, #rest do
        local a = rest[i]
        for j = 1, #result do
            local b = result[j].index
            r = r and r.measure and r.measure.distance < measure[a][b].distance and r or {index = a, measure = measure[a][b]}
        end
    end
    return closestConnection(result / r, measure, unpack(func.filter(rest, function(i) return i ~= r.index end)))
end

local function connectionNetwork(allConns)
    local measure = {}
    for i = 1, #allConns do
        measure[i] = {}
        for j = 1, i - 1 do
            measure[i][j] = connectionLevel(allConns[i], allConns[j])
            measure[j][i] = measure[i][j]
        end
    end
    
    local result = closestConnection(pipe.new / {index = 1}, measure, unpack(func.seq(2, #allConns)))
    return result * pipe.filter(pipe.select("measure")) * pipe.map(function(r) return mus.stepLane(unpack(r.measure.pt)) end) * pipe.flatten()
end

local makeConfig = function(params, transf)
    local radius = musm.rList[params.radius + 1] * 1000
    local length = min(musm.trackLengths[params.lPlatform + 1], abs(radius * pi * 1.5))
    local hPlatform = musm.hPlatformList[params.hPlatform + 1] * 0.001
    local slope = musm.slopeList[params.slope + 1] * 0.001
    
    local modelType = mus.models({platform = params.floor + 1, wall = params.wall + 1})
    
    local trans, mr, _ = coor.decomposite(transf)
    local refZ = hPlatform + 0.53
    local fitModel = slope == 0 and mus.fitModel2D or mus.fitModel
    return {
        isFinalized = params.isFinalized == 1,
        fitModel = fitModel,
        hPlatform = hPlatform,
        radius = radius,
        refZ = refZ,
        slope = slope,
        models = modelType,
        depth = depth,
        length = length,
        transf = {
            pt = transf * coor.transZ(depth),
            vec = mr
        },
        build = {
            platform = mus.buildSurface(coor.transZ(-1.93)),
            ceil = mus.buildSurface(),
            wall = mus.buildSurface(coor.scaleZ(5 - refZ))
        },
        fitModels = {
            platform = {
                central = fitModel(5, 5, 1.93, true, true),
                side = fitModel(1.7, 5, 1.93, true, true),
                edge = fitModel(0.8, 5, 1.93, true, true),
                wall = fitModel(5, 5, 1, true, true),
            },
            ceil = {
                central = fitModel(5, 5, 5.4, true, true),
                side = fitModel(1.8, 5, 5.4, true, true),
                edge = fitModel(0.7, 5, 5.4, true, true)
            },
            top = {
                central = fitModel(5, 5, 5.4, true, true),
                side = fitModel(2.5, 5, 7.5, true, true)
            },
            step = {
                central = fitModel(4.5, 5, 1.93, true, true),
                wall = fitModel(0.25, 5, 1.93, true, true),
            },
            track = {
                wall = fitModel(5, 5, 7.5, true, true),
                top = fitModel(5, 5, 7.5, true, true)
            }
        }
    }
end

local makeLayout = function(totalTracks, ignoreFst, ignoreLst)
    local function makeLayout(nbTracks, result)
        local p = false
        local t = true
        if (nbTracks == 0) then
            local result = ignoreLst and result or (result[#result] and (result / p) or result)
            return result
        elseif (nbTracks == totalTracks and ignoreFst) then
            return makeLayout(nbTracks - 1, result / t)
        elseif (nbTracks == totalTracks and not ignoreFst) then
            return makeLayout(nbTracks - 1, result / p / t)
        elseif (nbTracks == 1 and ignoreLst) then
            return makeLayout(nbTracks - 1, ((not result) or result[#result]) and (result / p / t) or (result / t))
        elseif (nbTracks == 1 and not ignoreLst) then
            return makeLayout(nbTracks - 1, result / t / p)
        elseif (result[#result] == t) then
            return makeLayout(nbTracks - 2, result / t / p / t)
        else
            return makeLayout(nbTracks - 1, result / t)
        end
    end
    return makeLayout(totalTracks, pipe.new)
end

local createTemplateFn = function(params)
    local radius = musm.rList[params.radius + 1] * 1000
    local length = min(musm.trackLengths[params.lPlatform + 1], abs(radius * pi * 1.5))
    
    local nbTracks = musm.trackNumberList[params.trackNb + 1]
    local layout = makeLayout(nbTracks, params.platformLeft == 0, params.platformRight == 0)
    local midPos = ceil(#layout / 2)
    local nSeg = length / 5
    local stair = floor(nSeg / 4)
    local result = {}
    local trackType = musm.trackTypeList[(params.catenary) + (params.highspeed) * 2 + 1]
    local platformType = musm.platformWidthList[(params.platformWidth) + 1]
    for i, t in ipairs(layout) do
        if t then
            result[(i - midPos >= 0 and i or 1000 + i) - midPos] = trackType
        else
            local slot = (i - midPos >= 0 and i or 1000 + i) + 1000 - midPos
            result[slot] = platformType
            result[slot + 2000 + stair * 100000] = "station/rail/mus_platform_upstair.module"
            result[slot + 2000 + (stair + 1) * 100000] = "station/rail/mus_platform_upstair.module"
        end
    end
    
    return result
end

local upgradeFn = function(params)
    local modules = {}
    local slotId = params.slotId
    if params.modules[slotId] then
        local function SwapModule(from, to, ...)
            if (from and to) then
                if params.modules[slotId].name == from then
                    table.insert(modules, {slotId, to})
                elseif params.modules[slotId].name == to then
                    table.insert(modules, {slotId, from})
                else
                    SwapModule(...)
                end
            end
        end
        
        if (params.catenaryToggle == 1) then
            SwapModule(
                "station/rail/mus_track_hs.module",
                "station/rail/mus_track_hs_catenary.module",
                "station/rail/mus_track_std.module",
                "station/rail/mus_track_std_catenary.module"
        )
        elseif (params.trackTypeToggle == 1) then
            SwapModule(
                "station/rail/mus_track_std.module",
                "station/rail/mus_track_hs.module",
                "station/rail/mus_track_std_catenary.module",
                "station/rail/mus_track_hs_catenary.module"
        )
        end
    end
    return modules
end

local updateFn = function(params)
    if #func.keys(params.modules) == 0 then
        return {
            edgeLists = {},
            models = {{
                id = "asset/icon/marker_exclamation.mdl",
                transf = coor.I(),
            }},
            terrainAlignmentLists = {{type = "EQUAL", faces = {}}}
        }
    end
    
    local result = {
        group = {},
        allArcs = {},
        slots = pipe.new * {},
        invoke = {{}, {}},
        models = pipe.new * {},
        terrainAlignmentLists = {},
        edgeLists = pipe.new * {},
        colliders = {},
        groundFaces = {},
        terminalGroups = {},
        stations = {},
        dependentSlots = {},
        slotConfig = {},
        terminalInfo = {},
        entryConnectors = {},
        entryModules = {},
        labelText = {},
        cost = 0
    }
    
    for slotId, m in pairs(params.modules) do
        local info = mus.slotInfo(slotId)
        if (info.pos.z < 9) then
            if (not result.group[info.pos.z]) then
                result.group[info.pos.z] =
                    {
                        allPos = pipe.new * {},
                        pos2Slot = {},
                        connectors = {},
                        modules = {},
                        arcs = {},
                        terminalInfo = {}
                    }
            
            end
            if (params.modules[slotId].params and not result.group[info.pos.z].config) then
                result.group[info.pos.z].config = makeConfig(params.modules[slotId].params, params.modules[slotId].transf)
            end
        elseif (info.pos.z == 9) then
            result.entryModules[slotId] = m
            table.insert(result.slots,
                {
                    id = slotId,
                    transf = m.transf,
                    type = "entry",
                    spacing = {0, 0, 0, 0}
                }
        )
        end
    end
    
    if (#func.keys(result.group) == 1) then
        local key = unpack(func.keys(result.group))
        result.group[key].config = makeConfig(params, coor.I())
    end
    
    for _, g in pairs(result.group) do
        if (not g.config) then
            g.config = makeConfig(params, coor.I())
        end
    end
    
    for slotId, m in pairs(params.modules) do
        local info = mus.slotInfo(slotId)
        if info.pos.z < 9 and info.typeId < 2 then
            local gr = result.group[info.pos.z]
            local pos = info.pos.x
            gr.allPos[#gr.allPos + 1] = pos
            gr.pos2Slot[pos] = slotId
            gr.modules[pos] = func.with(m,
                {
                    slotId = slotId,
                    metadata = func.with(m.metadata, {pos = pos})
                }
        )
        end
    end
    
    for n, g in pairs(result.group) do
        g.allPos = g.allPos * pipe.sort()
        local config = g.config
        local posMin = func.min(g.allPos)
        local posMax = func.max(g.allPos)
        
        local offsets = pipe.new
            * func.seq(posMin > 0 and -1 or (posMin - 1), posMax + 1)
            * pipe.map(function(pos)
                return g.modules[pos] and g.modules[pos].metadata or {pos = pos, width = 5}
            end)
            * offsetGen
        
        local reOffset = func.filter(offsets, function(o) return o[1] == 0 end)[1][2]
        offsets = offsets * pipe.map(function(o) return {o[1], o[2] - reOffset} end)
        
        local mrr = config.radius - offsets[config.radius < 0 and 1 or #offsets][2]
        
        local refLength = (config.radius / mrr) * config.length
        config.arcPacker = mus.arcPacker(refLength, config.slope, config.radius)
        
        local entityOffsets = offsets * pipe.fold(pipe.new * {}, function(r, o) return func.contains(g.allPos, o[1]) and r / o[2] or r end)
        
        for i, pos in ipairs(g.allPos) do
            g.arcs[pos] = config.arcPacker(config.radius - entityOffsets[i], coor.xyz(config.radius, 0, 0))
        end
        local slots = offsets
            * pipe.map(function(ph)
                local pos, offset = unpack(ph)
                return {
                    {
                        id = n * 10000 + (pos < 0 and (pos + 1000) or pos),
                        transf = coor.transX(offset) * g.config.transf.pt,
                        type = "mus_track",
                        spacing = {2.5, 2.5, 5, 5}
                    },
                    {
                        id = n * 10000 + (pos < 0 and (pos + 1000 + 1000) or (pos + 1000)),
                        transf = coor.transX(offset) * g.config.transf.pt,
                        type = "mus_platform",
                        spacing = {2.5, 2.5, 5, 5}
                    }
                }
            end)
            * pipe.flatten()
        result.slots = result.slots + slots
        
        local protectionEdges = pipe.mapn(
            {posMin, posMax},
            {-5, 5}
        )(function(pos, offset)
            if (g.modules[pos].metadata.isTrack) then
                return function()
                    local refArc = pipe.new
                        * g.arcs[pos]()()(offset)
                        * pipe.map(mus.arc2Edges)
                        * pipe.flatten()
                        * pipe.map(function(e) return {e[1] .. g.config.transf.pt, e[2] .. g.config.transf.vec} end)
                        * pipe.map(pipe.map(coor.vec2Tuple))
                    
                    local edges = {
                        type = "TRACK",
                        alignTerrain = false,
                        params = {
                            type = "mus_mock.lua",
                            catenary = false,
                        },
                        edgeType = "TUNNEL",
                        edgeTypeName = "mus_void.lua",
                        edges = refArc,
                        snapNodes = {},
                        tag2nodes = {}
                    }
                    
                    result.edgeLists = result.edgeLists / edges
                end
            else
                return function() end
            end
        end)
        table.insert(result.invoke[2], protectionEdges[1])
        table.insert(result.invoke[2], protectionEdges[2])
    end
    
    result.terminateConstructionHook = function()
        for _, f in ipairs(result.invoke[1]) do f() end
        for _, f in ipairs(result.invoke[2]) do f() end
        
        local signNrList = {}
        for i, m in ipairs(result.models) do
            if (m.posx) then
                if not signNrList[m.posx] then
                    signNrList[m.posx] = {left = {}, right = {}}
                end
                if m.isNrLeft then
                    table.insert(signNrList[m.posx].left, i)
                elseif m.isNrRight then
                    table.insert(signNrList[m.posx].right, i)
                end
            end
        end
        
        local connectors = pipe.new * {}
        
        for _, g in pairs(result.group) do
            local modules = g.modules
            local posSeq = pipe.new * func.seq(func.min(g.allPos), func.max(g.allPos))
            local orderedPos = posSeq * pipe.filter(function(pos) return pos >= 0 end) + posSeq * pipe.filter(function(pos) return pos < 0 end) * pipe.rev()
            
            for _, pos in ipairs(orderedPos) do
                local m = modules[pos]
                if m then
                    if m.metadata.isTrack then
                        local fn = {
                            function()
                                if (modules[pos - 1] and modules[pos - 1].metadata.isPlatform) then
                                    local node = g.terminalInfo[pos] + 7
                                    result.terminalGroups[#result.terminalGroups + 1] = {
                                        callbacks = {},
                                        terminals = func.seqMap(g.terminalInfo[pos - 1][2], function(t) return {t, 0} end),
                                        vehicleNodeOverride = node,
                                        vehicleNodeOverrideList = {node},
                                        vehicleNodeOverrideListCenter = {node + 3}
                                    }
                                    if signNrList[pos - 1] then
                                        local nr = tostring(#result.terminalGroups)
                                        for _, s in ipairs(signNrList[pos - 1].right) do
                                            result.models[s] = func.with(result.models[s], {nr = nr})
                                        end
                                    end
                                end
                            end,
                            function()
                                if (modules[pos + 1] and modules[pos + 1].metadata.isPlatform) then
                                    local node = g.terminalInfo[pos] + 1
                                    result.terminalGroups[#result.terminalGroups + 1] = {
                                        callbacks = {},
                                        terminals = func.seqMap(g.terminalInfo[pos + 1][1], function(t) return {t, 0} end),
                                        vehicleNodeOverride = node,
                                        vehicleNodeOverrideList = {node},
                                        vehicleNodeOverrideListCenter = {node + 3}
                                    }
                                    if signNrList[pos + 1] then
                                        local nr = tostring(#result.terminalGroups)
                                        for _, s in ipairs(signNrList[pos + 1].left) do
                                            result.models[s] = func.with(result.models[s], {nr = nr})
                                        end
                                    end
                                end
                            end
                        }
                        if (pos >= 0) then
                            fn[1]()
                            fn[2]()
                        else
                            fn[2]()
                            fn[1]()
                        end
                    end
                    if m.metadata.isPlatform then
                        if (g.connectors[pos]) then
                            local lanes = pipe.new * {
                                #g.connectors[pos].up > 1 and func.interlace(g.connectors[pos].up) or {},
                                #g.connectors[pos].down > 1 and func.interlace(g.connectors[pos].down) or {}
                            }
                            * pipe.flatten()
                            * pipe.map(function(c) return mus.unitLane(unpack(c)) end)
                            result.models = result.models + lanes
                        end
                    end
                end
            end
            
            result.models = result.models * pipe.filter(function(m) return (not m.isNrLeft and not m.isNrRight) or m.nr end)
            
            for i, m in ipairs(result.models) do
                if m.nr then
                    result.labelText[i - 1] = {m.nr, m.nr}
                end
            end
            
            local allConnectors = pipe.new
                * g.allPos
                * pipe.filter(function(pos) return g.modules[pos].metadata.isPlatform end)
                * pipe.map(function(pos) return g.connectors[pos] end)
            
            result.models = result.models
                + mus.linkConnectors(allConnectors * pipe.map(pipe.select("up")))
                + mus.linkConnectors(allConnectors * pipe.map(pipe.select("down")))
            
            table.insert(connectors, (allConnectors * pipe.map(pipe.select("up")) + allConnectors * pipe.map(pipe.select("down"))) * pipe.flatten())
        end
        
        local conn = connectionNetwork(connectors)
        result.models = result.models + conn
        
        local allUpConn = connectors * pipe.flatten() * pipe.filter(function(c) return c.up end)
        local entrySide = {}
        for i = 1, #result.entryConnectors do
            entrySide[i] = {false, false}
            local dist = {}
            for j = 1, #allUpConn do
                dist[#dist + 1] = pipe.new
                    * func.seq(1, 2)
                    * pipe.map(function(u)
                        local vec = result.entryConnectors[i][u] - allUpConn[j]
                        return {
                            conn = mus.stepLane(result.entryConnectors[i][u], allUpConn[j]),
                            distance = vec:length2(),
                            vec = vec:normalized(),
                            info = {i, u}
                        }
                    end)
                    * pipe.filter(function(c) return #c.conn > 0 end)
                    * pipe.min(function(l, r) return l.distance < r.distance end)
            end
            dist = func.sort(dist, function(l, r) return l.distance < r.distance end)
            if (#dist == 1) then
                result.models = result.models + dist[1].conn 
            elseif (#dist > 1) then
                local vecl = dist[1].vec
                local vecr = dist[2].vec
                if (vecl:cross(vecr).z > 0.5) then
                    result.models = result.models + dist[1].conn + dist[2].conn
                else
                    result.models = result.models + dist[1].conn 
                end
            end
        end
    end
    
    return result
end

function data()
    local constructionTemplates =
        {
            {
                constructionType = "RAIL_STATION",
                type = "DYNAMIC",
                availability = {
                    yearFrom = 1863,
                    yearTo = 0
                },
                description = {
                    name = _("MENU_NAME"),
                    description = _("MENU_DESC"),
                    icon = "ui/construction/station/rail/mus.tga"
                },
                data = {
                    params = {
                        {
                            key = "trackNb",
                            name = _("MENU_TRACK_NR"),
                            values = func.map(musm.trackNumberList, tostring),
                            uiType = "SLIDER",
                            defaultIndex = 1
                        },
                        {
                            key = "catenary",
                            name = _("MENU_TRACK_CAT"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                            defaultIndex = 1
                        },
                        {
                            key = "highspeed",
                            name = _("MENU_TRACK_HS"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                            defaultIndex = 1
                        },
                        {
                            key = "platformWidth",
                            name = _("MENU_PLATFORM_WIDTH"),
                            values = {"5", "10", "15", "20"},
                            defaultIndex = 1
                        },
                        {
                            key = "platformLeft",
                            name = _("MENU_PLATFORM_LEFT"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                        },
                        {
                            key = "platformRight",
                            name = _("MENU_PLATFORM_RIGHT"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                        },
                        {
                            key = "isFinalized",
                            name = _("MENU_FORCE_USE"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                            defaultIndex = 0
                        },
                    }
                },
            }
        }
    
    return {
        type = "RAIL_STATION",
        description = {
            name = _("MENU_NAME"),
            description = _("MENU_DESC")
        },
        availability = {
            yearFrom = 1863,
            yearTo = 0
        },
        order = 1000,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        params = params(),
        upgradeFn = upgradeFn,
        updateFn = updateFn
    }
end
